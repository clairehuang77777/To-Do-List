{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/huang/todolist-react-starter/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4;import styled from'styled-components';import clsx from'clsx';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const StyledAddTodoContainer=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  min-height: 52px;\\n  display: flex;\\n  align-items: center;\\n  position: relative;\\n  word-wrap: break-word;\\n  word-break: break-word;\\n  padding: 0 12px;\\n  box-shadow: 0 17px 0 -16px #e5e5e5;\\n  flex-wrap: wrap;\\n\\n  &.active {\\n    box-shadow: 0 17px 0 -16px var(--major);\\n  }\\n\"])));const StyledLabelIcon=styled.label(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  display: inline-flex;\\n  font-size: 30px;\\n  transition: color 0.2s ease-out;\\n  font-weight: 300;\\n\\n  &:after {\\n    content: '+';\\n  }\\n\"])));const StyledInputContainer=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  min-height: 52px;\\n  display: flex;\\n  align-items: center;\\n  flex: 1;\\n  user-select: none;\\n\\n  input {\\n    flex: 1;\\n    padding: 8px 12px;\\n    border: 0;\\n    outline: 0;\\n    font-size: 1rem;\\n\\n    &::placeholder {\\n      color: var(--major);\\n      font-size: 13px;\\n    }\\n  }\\n  $.active {\\n    input::placeholder {\\n      color: var(--gray);\\n    }\\n  }\\n\"])));const StyledAddTodoActionContainer=styled.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  button {\\n    font-size: 13px;\\n    color: var(--major);\\n    padding-right: 5px;\\n    display: none;\\n  }\\n\\n  &.active {\\n    button {\\n      display: block;\\n    }\\n  }\\n\"])));/*inputValue 使用者在TodoInput內輸入的值\nonChange 當使用者的輸入產生變化>> 就要更新inputValue\nonKeyPress 當使用者按下enter >> 建立一個新的TodoItem()\n[疑問] 這兩個動作不會很重複嗎?\nonAddToDo 當使用者按下\"+\"號, >> 建立一個新的TodoItem\n*/const TodoInput=_ref=>{let{inputValue,onChange,onKeyDown,onAddTodo}=_ref;return/*#__PURE__*/_jsxs(StyledAddTodoContainer,{children:[/*#__PURE__*/_jsx(StyledLabelIcon,{className:\"icon\",htmlFor:\"add-todo-input\"}),/*#__PURE__*/_jsx(StyledInputContainer,{className:clsx(\"\",{active:inputValue.length>0}),children:/*#__PURE__*/_jsx(\"input\",{id:\"add-todo-input\",type:\"text\",placeholder:\"\\u65B0\\u589E\\u5DE5\\u4F5C\",value:inputValue,onChange:onChange//更新inputValue值\n,onKeyDown:e=>{if(e.key==='Enter'){onKeyDown();}}})}),/*#__PURE__*/_jsx(StyledAddTodoActionContainer,{className:clsx(\"\",{active:inputValue.length>0}),children:/*#__PURE__*/_jsx(\"button\",{className:\"btn-reset\",onClick:onAddTodo,children:\"\\u65B0\\u589E\"})})]});};export default TodoInput;","map":{"version":3,"names":["styled","clsx","jsx","_jsx","jsxs","_jsxs","StyledAddTodoContainer","div","_templateObject","_taggedTemplateLiteral","StyledLabelIcon","label","_templateObject2","StyledInputContainer","_templateObject3","StyledAddTodoActionContainer","_templateObject4","TodoInput","_ref","inputValue","onChange","onKeyDown","onAddTodo","children","className","htmlFor","active","length","id","type","placeholder","value","e","key","onClick"],"sources":["/Users/huang/todolist-react-starter/src/components/TodoInput.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport clsx from 'clsx';\n\nconst StyledAddTodoContainer = styled.div`\n  min-height: 52px;\n  display: flex;\n  align-items: center;\n  position: relative;\n  word-wrap: break-word;\n  word-break: break-word;\n  padding: 0 12px;\n  box-shadow: 0 17px 0 -16px #e5e5e5;\n  flex-wrap: wrap;\n\n  &.active {\n    box-shadow: 0 17px 0 -16px var(--major);\n  }\n`;\n\nconst StyledLabelIcon = styled.label`\n  display: inline-flex;\n  font-size: 30px;\n  transition: color 0.2s ease-out;\n  font-weight: 300;\n\n  &:after {\n    content: '+';\n  }\n`;\n\nconst StyledInputContainer = styled.div`\n  min-height: 52px;\n  display: flex;\n  align-items: center;\n  flex: 1;\n  user-select: none;\n\n  input {\n    flex: 1;\n    padding: 8px 12px;\n    border: 0;\n    outline: 0;\n    font-size: 1rem;\n\n    &::placeholder {\n      color: var(--major);\n      font-size: 13px;\n    }\n  }\n  $.active {\n    input::placeholder {\n      color: var(--gray);\n    }\n  }\n`;\n\nconst StyledAddTodoActionContainer = styled.div`\n  button {\n    font-size: 13px;\n    color: var(--major);\n    padding-right: 5px;\n    display: none;\n  }\n\n  &.active {\n    button {\n      display: block;\n    }\n  }\n`;\n/*inputValue 使用者在TodoInput內輸入的值\nonChange 當使用者的輸入產生變化>> 就要更新inputValue\nonKeyPress 當使用者按下enter >> 建立一個新的TodoItem()\n[疑問] 這兩個動作不會很重複嗎?\nonAddToDo 當使用者按下\"+\"號, >> 建立一個新的TodoItem\n*/\nconst TodoInput = ({ \n  inputValue, \n  onChange, \n  onKeyDown, \n  onAddTodo }) => {\n\n  \n  return (\n    <StyledAddTodoContainer>\n      <StyledLabelIcon className=\"icon\" htmlFor=\"add-todo-input\" />\n      <StyledInputContainer className={clsx(\"\", {active:inputValue.length>0})} >\n        <input\n          id=\"add-todo-input\"\n          type=\"text\"\n          placeholder=\"新增工作\"\n          value={inputValue}\n          onChange={onChange} //更新inputValue值\n          onKeyDown={(e) => {\n            if (e.key === 'Enter')\n              {onKeyDown()}\n            }\n          }\n        />\n      </StyledInputContainer>\n      <StyledAddTodoActionContainer className={clsx(\"\",{active:inputValue.length > 0})}>\n        <button \n          className=\"btn-reset\"\n          onClick={onAddTodo}>新增</button>\n      </StyledAddTodoActionContainer>\n    </StyledAddTodoContainer>\n  );\n};\n\nexport default TodoInput;\n"],"mappings":"gNAAA,MAAO,CAAAA,MAAM,KAAM,mBAAmB,CACtC,MAAO,CAAAC,IAAI,KAAM,MAAM,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAExB,KAAM,CAAAC,sBAAsB,CAAGN,MAAM,CAACO,GAAG,CAAAC,eAAA,GAAAA,eAAA,CAAAC,sBAAA,uSAcxC,CAED,KAAM,CAAAC,eAAe,CAAGV,MAAM,CAACW,KAAK,CAAAC,gBAAA,GAAAA,gBAAA,CAAAH,sBAAA,uJASnC,CAED,KAAM,CAAAI,oBAAoB,CAAGb,MAAM,CAACO,GAAG,CAAAO,gBAAA,GAAAA,gBAAA,CAAAL,sBAAA,4XAwBtC,CAED,KAAM,CAAAM,4BAA4B,CAAGf,MAAM,CAACO,GAAG,CAAAS,gBAAA,GAAAA,gBAAA,CAAAP,sBAAA,yLAa9C,CACD;AACA;AACA;AACA;AACA;AACA,EACA,KAAM,CAAAQ,SAAS,CAAGC,IAAA,EAIA,IAJC,CACjBC,UAAU,CACVC,QAAQ,CACRC,SAAS,CACTC,SAAU,CAAC,CAAAJ,IAAA,CAGX,mBACEb,KAAA,CAACC,sBAAsB,EAAAiB,QAAA,eACrBpB,IAAA,CAACO,eAAe,EAACc,SAAS,CAAC,MAAM,CAACC,OAAO,CAAC,gBAAgB,CAAE,CAAC,cAC7DtB,IAAA,CAACU,oBAAoB,EAACW,SAAS,CAAEvB,IAAI,CAAC,EAAE,CAAE,CAACyB,MAAM,CAACP,UAAU,CAACQ,MAAM,CAAC,CAAC,CAAC,CAAE,CAAAJ,QAAA,cACtEpB,IAAA,UACEyB,EAAE,CAAC,gBAAgB,CACnBC,IAAI,CAAC,MAAM,CACXC,WAAW,CAAC,0BAAM,CAClBC,KAAK,CAAEZ,UAAW,CAClBC,QAAQ,CAAEA,QAAU;AAAA,CACpBC,SAAS,CAAGW,CAAC,EAAK,CAChB,GAAIA,CAAC,CAACC,GAAG,GAAK,OAAO,CACnB,CAACZ,SAAS,CAAC,CAAC,EACd,CACD,CACF,CAAC,CACkB,CAAC,cACvBlB,IAAA,CAACY,4BAA4B,EAACS,SAAS,CAAEvB,IAAI,CAAC,EAAE,CAAC,CAACyB,MAAM,CAACP,UAAU,CAACQ,MAAM,CAAG,CAAC,CAAC,CAAE,CAAAJ,QAAA,cAC/EpB,IAAA,WACEqB,SAAS,CAAC,WAAW,CACrBU,OAAO,CAAEZ,SAAU,CAAAC,QAAA,CAAC,cAAE,CAAQ,CAAC,CACL,CAAC,EACT,CAAC,CAE7B,CAAC,CAED,cAAe,CAAAN,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}