{"ast":null,"code":"var _jsxFileName = \"/Users/huang/todolist-react-starter/src/contexts/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\n//由此Context來統一儲存身份狀態\n// import jwt from 'jsonwebtoken'\nimport { jwtDecode } from 'jwt-decode';\nimport { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { signup, login, checkPermission } from \"../api/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultAuthContext = {\n  isAuthenticated: false,\n  //判斷使用者是否具有有效憑證, 預設是false, 當取得有效憑證(註冊成功或登入成功)則切換為true \n  currentMember: null,\n  // 當前使用者資料, 預設為null, 成功登入後就會有使用者資料\n  register: null,\n  //註冊方法\n  login: null,\n  //登入方法\n  logout: null //登出方法\n};\nconst AuthContext = /*#__PURE__*/createContext(defaultAuthContext);\n\n//建立AuthProvider管理狀態,回傳能讓子元件共用的<AuthContext.Provider>\n\n//輸出context hook \nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  //透過解析token方式取得payload\n  const [payload, setPayload] = useState(null); //這個payload會透過解析JSONwebToken來取得\n\n  //把判斷身份是否有效的useEffect搬進來\n  const {\n    pathname\n  } = useLocation();\n  useEffect(() => {\n    async function CheckTokenIsValid() {\n      const authToken = localStorage.getItem(\"authToken\");\n\n      //如果沒有authToken, 停止檢查, 停留此頁\n      if (!authToken) {\n        console.log(auth);\n        setIsAuthenticated(false);\n        setPayload(null);\n        return;\n      }\n\n      // 如果有authToken打API驗證authToken\n      const result = await checkPermission(authToken);\n      //如果token無效才返回LoginPage\n      if (!result) {\n        setIsAuthenticated(false);\n        setPayload(null);\n        console.log(\"Invalid auth token\");\n      } else {\n        setIsAuthenticated(true);\n        const tempPayload = jwtDecode(authToken);\n        setPayload(tempPayload);\n      }\n    }\n    CheckTokenIsValid();\n  }, [pathname]);\n\n  //只要state狀態更新,接連更新provider所帶的value值\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      currentMember: payload && {\n        id: payload.sub,\n        name: payload.name\n      },\n      //因為authContext不會知道註冊表單輸入的值,補上data作為調用選項\n      register: async data => {\n        const {\n          success,\n          authToken\n        } = await signup({\n          username: data.username,\n          email: data.email,\n          password: data.password\n        });\n        const tempPayload = jwtDecode(authToken);\n        //先確認payload是否存在, 存在才代表登入有效, 就存起來\n        if (tempPayload) {\n          setPayload(tempPayload);\n          setIsAuthenticated(true); //註冊成功\n          localStorage.setItem(\"authToken\", authToken);\n        } else {\n          setPayload(null);\n          setIsAuthenticated(false);\n        }\n        return success;\n      },\n      login: async data => {\n        const {\n          success,\n          authToken\n        } = await login({\n          username: data.username,\n          password: data.password\n        });\n        const tempPayload = jwtDecode(authToken);\n        if (tempPayload) {\n          setPayload(tempPayload);\n          setIsAuthenticated(true); //登入成功\n          localStorage.setItem(\"authToken\", authToken);\n          console.log(authToken);\n          console.log(tempPayload);\n        } else {\n          setPayload(null);\n          setIsAuthenticated(false);\n          console.log(\"吃不到tempPayload\");\n        }\n        return success;\n      },\n      logout: () => {\n        localStorage.removeItem(\"authToken\");\n        setIsAuthenticated(false);\n        setPayload(null);\n      }\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"XeLZc7uDGF+Gk4an/nihe0Mv/08=\", false, function () {\n  return [useLocation];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","jwtDecode","useLocation","useEffect","signup","login","checkPermission","jsxDEV","_jsxDEV","defaultAuthContext","isAuthenticated","currentMember","register","logout","AuthContext","useAuth","_s","AuthProvider","children","_s2","setIsAuthenticated","payload","setPayload","pathname","CheckTokenIsValid","authToken","localStorage","getItem","console","log","auth","result","tempPayload","Provider","value","id","sub","name","data","success","username","email","password","setItem","removeItem","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/huang/todolist-react-starter/src/contexts/AuthContext.jsx"],"sourcesContent":["import { createContext, useContext, useState } from \"react\"\n//由此Context來統一儲存身份狀態\n// import jwt from 'jsonwebtoken'\nimport { jwtDecode } from 'jwt-decode'\nimport { useLocation } from \"react-router-dom\"\nimport { useEffect } from \"react\"\nimport { signup, login, checkPermission } from \"../api/auth\"\n\nconst defaultAuthContext = {\n  isAuthenticated: false, //判斷使用者是否具有有效憑證, 預設是false, 當取得有效憑證(註冊成功或登入成功)則切換為true \n  currentMember: null, // 當前使用者資料, 預設為null, 成功登入後就會有使用者資料\n  register: null, //註冊方法\n  login: null, //登入方法\n  logout: null //登出方法\n}\n\nconst AuthContext = createContext(defaultAuthContext)\n\n//建立AuthProvider管理狀態,回傳能讓子元件共用的<AuthContext.Provider>\n\n//輸出context hook \nexport const useAuth = () => useContext(AuthContext);\nexport const AuthProvider = ({children}) => {\n  const [isAuthenticated, setIsAuthenticated]=useState(false)\n  //透過解析token方式取得payload\n  const [payload, setPayload]=useState(null)//這個payload會透過解析JSONwebToken來取得\n\n  //把判斷身份是否有效的useEffect搬進來\n  const {pathname} = useLocation()\n\n    useEffect(() => {\n      async function CheckTokenIsValid() {\n        const authToken = localStorage.getItem(\"authToken\");\n\n        //如果沒有authToken, 停止檢查, 停留此頁\n        if (!authToken) {\n          console.log(auth)\n          setIsAuthenticated(false)\n          setPayload(null)\n          return;\n        }\n\n        // 如果有authToken打API驗證authToken\n        const result = await checkPermission(authToken);\n        //如果token無效才返回LoginPage\n        if (!result) {\n          setIsAuthenticated(false)\n          setPayload(null)\n          console.log(\"Invalid auth token\")\n        } else {\n          setIsAuthenticated(true)\n          const tempPayload = jwtDecode(authToken)\n          setPayload(tempPayload);\n        }\n      }\n      CheckTokenIsValid();\n    }, [pathname]);\n\n\n   //只要state狀態更新,接連更新provider所帶的value值\n  return <AuthContext.Provider value={{\n      isAuthenticated,\n      currentMember: payload && {\n        id: payload.sub,\n        name: payload.name,\n      },\n      //因為authContext不會知道註冊表單輸入的值,補上data作為調用選項\n      register: async (data) => {\n        const { success, authToken } = await signup({\n          username: data.username,\n          email: data.email,\n          password: data.password,\n        });\n        const tempPayload = jwtDecode(authToken);\n        //先確認payload是否存在, 存在才代表登入有效, 就存起來\n        if (tempPayload) {\n          setPayload(tempPayload);\n          setIsAuthenticated(true); //註冊成功\n          localStorage.setItem(\"authToken\", authToken);\n        } else {\n          setPayload(null);\n          setIsAuthenticated(false);\n        }\n        return success;\n      },\n      login: async (data) => {\n        const { success, authToken } = await login({\n          username: data.username,\n          password: data.password,\n        });\n        const tempPayload = jwtDecode(authToken);\n        if (tempPayload) {\n          setPayload(tempPayload);\n          setIsAuthenticated(true); //登入成功\n          localStorage.setItem(\"authToken\", authToken);\n          console.log(authToken)\n          console.log(tempPayload)\n        } else {\n          setPayload(null);\n          setIsAuthenticated(false);\n          console.log(\"吃不到tempPayload\")\n        }\n        return success;\n      },\n      logout: () => {\n        localStorage.removeItem(\"authToken\");\n        setIsAuthenticated(false);\n        setPayload(null);\n      },\n    }}\n  >\n    {children}\n  </AuthContext.Provider>;\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}